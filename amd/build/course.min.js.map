{"version":3,"file":"course.min.js","sources":["../src/course.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Main Javascript module for format_tiles for when user is *NOT* editing.\n * See course_edit for if they are editing.\n * Handles the UI changes when tiles are selected and anything else not\n * covered by the specific modules\n *\n * @module      format_tiles/course\n * @package     course/format\n * @subpackage  tiles\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\"jquery\", \"core/templates\", \"core/ajax\", \"format_tiles/browser_storage\",\n        \"core/notification\", \"core/str\", \"format_tiles/tile_fitter\"],\n    function ($, Templates, ajax, browserStorage, Notification, str, tileFitter) {\n        \"use strict\";\n\n        var body = $(\"body\");\n        var bodyHtml = $(\"body, html\");\n        var isMobile;\n        var loadingIconHtml;\n        var stringStore = [];\n        var windowOverlay;\n        var scrollFuncLock = false;\n        var sectionIsOpen = false;\n        var HEADER_BAR_HEIGHT = 60; // This varies by theme and version so will be reset once pages loads below.\n        var reopenLastVisitedSection = false;\n        var backDropZIndex = 0;\n        var courseId;\n        var resizeLocked = false;\n        var enableCompletion;\n\n         // Keep a record of which tile is currently open.\n        var openTile = 0;\n\n        var Selector = {\n            PAGE: \"#page\",\n            TILE: \".tile\",\n            TILEID: \"#tile-\",\n            MOVEABLE_SECTION: \".moveablesection\",\n            FILTER_BUTTON: \".filterbutton\",\n            TILE_LOADING_ICON: \".tile-loading-icon\",\n            TILE_LOADING_ICON_ID: \"#loading-icon-\",\n            TILE_COLLAPSED: \".tile-collapsed\",\n            TILE_CLICKABLE: \".tile-clickable\",\n            TILES: \"ul.tiles\",\n            ACTIVITY: \".activity\",\n            SPACER: \".spacer\",\n            SECTION_MOVEABLE: \".moveablesection\",\n            SECTION_ID: \"#section-\",\n            SECTION_TITLE: \".sectiontitle\",\n            SECTION_MAIN: \".section.main\",\n            SECTION_BUTTONS: \".sectionbuttons\",\n            CLOSE_SEC_BTN: \".closesectionbtn\",\n            HIDE_SEC0_BTN: \"#buttonhidesec0\",\n            SECTION_ZERO: \"#section-0\",\n            MOODLE_VIDEO: \".mediaplugin.mediaplugin_videojs\",\n            LAUNCH_STANDARD: '[data-action=\"launch-tiles-standard\"]',\n            TOOLTIP: \"[data-toggle=tooltip]\",\n            HEADER_BAR: [\"header.navbar\", \"nav.fixed-top.navbar\", \"#essentialnavbar.moodle-has-zindex\", \"#navwrap\",\n                \"nav.navbar-fixed-top\", \"#adaptable-page-header-wrapper\"]\n            // We try several different selectors for header bar as it varies between theme.\n            // (Boost based, clean based, essential etc).\n        };\n        var ClassNames = {\n            SELECTED: \"selected\",\n            OPEN: \"open\",\n            CLOSED: \"closed\",\n            LAUNCH_CM_MODAL: \"launch-tiles-cm-modal\",\n            STATE_VISIBLE: 'state-visible' // This is a Snap theme class and was added to make this format cooperate better with it.\n        };\n\n        var Event = {\n            CLICK: \"click\",\n            KEYDOWN: \"keydown\",\n            SCROLL: \"scroll\"\n        };\n\n        var CSS = {\n            DISPLAY: \"display\",\n            Z_INDEX: \"z-index\",\n            HEIGHT: \"height\",\n            BG_COLOUR: \"background-color\"\n        };\n        var Keyboard = {\n            ESCAPE: 27,\n            TAB: 9,\n            RETURN: 13\n        };\n\n        /**\n         * If we have embedded video in section, stop it.\n         * Runs when section is closed.\n         * @param {number} section where the video is.\n         */\n        var stopVideoPlaying = function(section) {\n            var contentSection = $(Selector.SECTION_ID + section);\n\n            // First iframes (e.g. embedded YouTube).\n            contentSection.find(\"iframe\").each(function (index, iframe) {\n                iframe = $(iframe);\n                // Remove the src from the iframe but keep it in case the section is re-opened.\n                if (iframe.attr('src')) {\n                    iframe.attr('data-src', iframe.attr(\"src\"));\n                    iframe.attr('src', \"\");\n                }\n            });\n\n            // Then Moodle media player.\n            var mediaPlayers = contentSection.find(Selector.MOODLE_VIDEO);\n            if (mediaPlayers.length > 0) {\n                contentSection.html(\"\");\n            }\n        };\n\n        /**\n         * When JS navigation is being used, when a user un-selects a tile, we have to move the tile's z-index back so that it is\n         * no longer on top of the overlay, as well as removing its \"selected\" class, and hiding the overlay\n         * @param {number} sectionToFocus if we want to focus a tile after closing, which one\n         */\n        var cancelTileSelections = function (sectionToFocus) {\n            $(Selector.MOVEABLE_SECTION).each(function (index, sec) {\n                sec = $(sec);\n                if (sec.is(\":visible\")) {\n                    stopVideoPlaying(sec.attr(\"data-section\"));\n                    sec.slideUp().removeClass(ClassNames.STATE_VISIBLE); // Excludes section 0.\n                }\n            });\n            $(Selector.TILE).removeClass(ClassNames.SELECTED).css(CSS.Z_INDEX, \"\").css(CSS.BG_COLOUR, \"\");\n            $(\".section \" + ClassNames.SELECTED).removeClass(ClassNames.SELECTED).css(CSS.Z_INDEX, \"\");\n            windowOverlay.fadeOut(300);\n\n            if (sectionToFocus !== undefined && sectionToFocus !== 0) {\n                $(Selector.TILEID + sectionToFocus).focus();\n            }\n            $(Selector.TILE_LOADING_ICON).fadeOut(300, function () {\n                $(Selector.TILE_LOADING_ICON).html(\"\");\n            });\n            sectionIsOpen = false;\n            openTile = 0;\n        };\n\n        /**\n         * Set the HTML for a course section to the correct div in the page\n         * @param {Object} contentArea the jquery object for the content area\n         * @param {String} content the HTML\n         * @returns {boolean} success\n         */\n        var setCourseContentHTML = function (contentArea, content) {\n            if (content) {\n                contentArea.html(content);\n                $(Selector.TILE_LOADING_ICON).fadeOut(300, function () {\n                    $(Selector.TILE_LOADING_ICON).html(\"\");\n                });\n\n                if (contentArea.attr(\"id\") !== Selector.SECTION_ZERO) {\n                    // Trap the tab key navigation in the content bearing section.\n                    // Until the user clicks the close button.\n                    // When user reaches last item, send them back to first.\n                    // And vice versa if going backwards.\n\n                    var activities = contentArea.find(Selector.ACTIVITY).not(Selector.SPACER);\n                    contentArea.on(Event.KEYDOWN, function (e) {\n                        if (e.keyCode === Keyboard.ESCAPE) {\n                            // Close open tile, and return focus to closed tile, for screen reader user.\n                            browserStorage.setLastVisitedSection(0);\n                            cancelTileSelections(0);\n                            $(Selector.TILEID + contentArea.attr('data-section')).focus();\n                        }\n                    });\n                    if (!isMobile) {\n                        activities.last().on(Event.KEYDOWN, function (e) {\n                            if (e.keyCode === Keyboard.TAB && !e.shiftKey\n                                    && $(e.relatedTarget).closest(Selector.SECTION_MAIN).attr(\"id\") !== contentArea.attr(\"id\")) {\n                                // RelatedTarget is the item we tabbed to.\n                                // If we reached here, the item we are on is not a member of the section we were in.\n                                // (I.e. we are trying to tab out of the bottom of section) so move tab back to first item instead.\n                                setTimeout(function () {\n                                    // Allow very short delay so we dont skip forward on the basis of our last key press.\n                                    contentArea.find(Selector.SECTION_TITLE).focus();\n                                    bodyHtml.animate({scrollTop: contentArea.offset().top - HEADER_BAR_HEIGHT}, \"slow\");\n                                    contentArea.find(Selector.SECTION_BUTTONS).css(\"top\", \"\");\n                                }, 200);\n                            }\n                        });\n                        contentArea.find(Selector.SECTION_TITLE).on(Event.KEYDOWN, function (e) {\n                            if (e.keyCode === Keyboard.TAB && e.shiftKey\n                                    && $(e.relatedTarget).closest(Selector.SECTION_MAIN).attr(\"id\") !== contentArea.attr(\"id\")) {\n                                // See explanation previous block.\n                                // Here we are trying to tab backwards out of the top of our section.\n                                // So take us to last item instead.\n                                setTimeout(function () {\n                                    activities.last().focus();\n                                }, 200);\n                            }\n                        });\n                    }\n                }\n\n                if (!isMobile) {\n                    // Activate tooltips for completion toggle and any \"restricted\" items in this content.\n                    setTimeout(function () {\n                        // Manual forms, auto icons and \"Restricted until ...\" etc.\n                        try {\n                            const tooltipItems = contentArea.find(\".badge-info\");\n                            if (tooltipItems.length > 0 && typeof tooltipItems.tooltip == 'function') {\n                                tooltipItems.tooltip();\n                            }\n                        } catch (err) {\n                            require([\"core/log\"], function(log) {\n                                log.debug(err);\n                            });\n                        }\n                    }, 500);\n                }\n                // As we have just loaded new content, ensure that we initialise videoJS media player if required.\n                if (contentArea.find(Selector.MOODLE_VIDEO).length !== 0) {\n                    require([\"media_videojs/loader\"], function(videoJS) {\n                        videoJS.setUp();\n                    });\n                }\n\n                if (typeof window.MathJax !== \"undefined\") {\n                    try {\n                        const mathJaxElems = contentArea.find('.filter_mathjaxloader_equation');\n                        if (mathJaxElems.length) {\n                            mathJaxElems.each((i, node) => {\n                                window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub, node]);\n                            });\n                        }\n                    } catch (err) {\n                        require([\"core/log\"], function(log) {\n                            log.debug(err);\n                        });\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n\n        /**\n         * Expand a content containing section (e.g. on tile click)\n         * @param {object} contentArea\n         * @param {number} tileId to expand\n         */\n        var expandSection = function (contentArea, tileId) {\n            var expandAndScroll = function () {\n                // Scroll to the top of content bearing section\n                // we have to wait until possible reOrg and slide down totally before calling this, else co-ords are wrong.\n                var scrollTo = $(\"#tileText-\" + tileId).offset().top - HEADER_BAR_HEIGHT;\n                if (scrollTo === $(window).scrollTop) {\n                    // Scroll by at least one pixel otherwise z-index on selected tile is not changed.\n                    // Until mouse moves.\n                    scrollTo += 1;\n                }\n                contentArea.find(Selector.SECTION_TITLE).focus();\n                // If user tries to scroll during animation, stop animation.\n                var events = \"scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove\";\n                body.on(events, function () {\n                    body.stop();\n                });\n\n                bodyHtml.animate({scrollTop: scrollTo}, \"slow\", function () {\n                    // Animation complete, remove stop handler.\n                    bodyHtml.off(events, function () {\n                        bodyHtml.stop();\n                    });\n                });\n                sectionIsOpen = true;\n                openTile = tileId;\n\n                // For users with screen readers, move focus to the first actionable item within the tile.\n                // This will be the first anchor tag on the activity.\n                contentArea.find(\"a\").first().focus();\n\n                // If we have any iframes in the section which were previous emptied out, re-populate.\n                // This will happen if we have previously closed a section with videos in, and they were muted.\n                const iframes = contentArea.find(\"iframe\");\n                if (iframes.length > 0) {\n                    iframes.each(function (index, iframe) {\n                        iframe = $(iframe);\n                        // If iframe has no src, add it from data-src.\n                        if (iframe.attr('src') === '' && iframe.attr('data-src') !== undefined) {\n                            iframe.attr('src', iframe.attr(\"data-src\"));\n                        }\n                    });\n\n                    if (enableCompletion) {\n                        // Some iframes may load content set to mark as complete on view.\n                        // So maybe need to update tile completion info. E.g. applies with H5P filter.\n                        require([\"format_tiles/completion\"], function (completion) {\n                            setTimeout(() => {\n                                completion.updateTileInformation();\n                            }, 1000);\n                        });\n                    }\n                }\n            };\n\n            /**\n             * Make sure that the section close and edit buttons always appear at the top of the section on scroll\n             */\n            var holdSectionButtonPosition = function () {\n                var buttons = contentArea.find(Selector.SECTION_BUTTONS);\n                $(window).on(Event.SCROLL, function () {\n                    if (!scrollFuncLock && sectionIsOpen) {\n                        scrollFuncLock = true;\n                        buttons.fadeOut(300);\n                        setTimeout(function () {\n                            var windowTop = $(window).scrollTop();\n                            var desiredNewPositionInSection = (windowTop - contentArea.offset().top + 50);\n                            if (desiredNewPositionInSection > 0\n                                    && desiredNewPositionInSection < contentArea.outerHeight() - 100) {\n                                desiredNewPositionInSection = (windowTop - contentArea.offset().top + 50);\n                                buttons.css(\"top\", desiredNewPositionInSection);\n                                if (windowOverlay.css(CSS.DISPLAY) === \"none\") {\n                                    windowOverlay.fadeIn(300);\n                                }\n                            } else if (desiredNewPositionInSection < 0) {\n                                buttons.css(\"top\", 0);\n                            }\n                            if (windowTop > contentArea.offset().top + contentArea.outerHeight() - 50) {\n                                // We have scrolled down and content bottom has gone out of the top of window.\n                                if (windowOverlay.css(CSS.DISPLAY) === \"block\") {\n                                    windowOverlay.fadeOut(300);\n                                }\n                                buttons.css(\"top\", 0);\n                            } else if (contentArea.offset().top > windowTop + $(window).outerHeight()) {\n                                // We have scrolled up and  content bottom has gone out of the bottom of window.\n                                if (windowOverlay.css(CSS.DISPLAY) === \"block\") {\n                                    windowOverlay.fadeOut(300);\n                                }\n                                buttons.css(\"top\", 0);\n                            } else if (windowOverlay.css(CSS.DISPLAY) === \"none\") {\n                                windowOverlay.fadeIn(300);\n                            }\n                            buttons.fadeIn(300, function () {\n                                // Release lock on this function.\n                                scrollFuncLock = false;\n                            });\n                        }, 500);\n                    }\n                });\n                if (!scrollFuncLock && !sectionIsOpen && windowOverlay.is(\":visible\")) {\n                    windowOverlay.fadeOut(300);\n                }\n            };\n\n            contentArea.addClass(ClassNames.STATE_VISIBLE);\n            contentArea.slideDown(350, function () {\n                // Wait until we have finished sliding down before we work out where the top is for scroll.\n                expandAndScroll();\n                holdSectionButtonPosition();\n            });\n            openTile = tileId;\n        };\n\n        /**\n         * We find out what section is open, collapse them all, then run the re-org.\n         * Finally we re-open the section.\n         * This is to ensure that the content bearing section is on the row under the tile clicked.\n         * It is run at page load and again if window is re-sized etc.\n         * @param {boolean} delayBefore do we want a delay before we re-org.  This allows e.g. browser resizing to complete.\n         * @param {boolean} fitTilesToScreenWidth whether we need to resize the tiles window while tiles are closed.\n         * @returns {Promise}\n         */\n        var reOrgSections = function (delayBefore, fitTilesToScreenWidth) {\n            var dfd = new $.Deferred();\n            var openedSection = $(\".moveablesection:visible\");\n            var openedSectionNum = 0;\n            if (openedSection.length > 0) {\n                openedSectionNum = openedSection.attr(\"data-section\");\n                cancelTileSelections();\n            }\n            var reOrgFunc = function(delayBefore) {\n                tileFitter.runReOrg(delayBefore)\n                    .done(function(result) {\n                        if (openedSectionNum !== 0) {\n                            expandSection(openedSection, openedSectionNum);\n                        }\n                        dfd.resolve(result);\n                    })\n                    .fail(function(result) {\n                        if (openedSectionNum !== 0) {\n                            expandSection(openedSection, openedSectionNum);\n                        }\n                        dfd.reject(result);\n                    });\n            };\n\n            if (fitTilesToScreenWidth) {\n                setTimeout(function() {\n                    tileFitter.resizeTilesDivWidth(courseId).done(function() {\n                        reOrgFunc(false);\n                    }, delayBefore);\n                });\n\n            } else {\n                reOrgFunc(delayBefore);\n            }\n            return dfd.promise();\n        };\n\n        var failedLoadSectionNotify = function(sectionNum, failResult, contentArea) {\n            if (failResult) {\n                // Notify the user and invite them to refresh.  We did get a \"failResult\" from server,\n                // So it looks like we do have a connection and can launch this.\n                Notification.confirm(\n                    stringStore.sectionerrortitle,\n                    stringStore.sectionerrorstring,\n                    stringStore.refresh,\n                    stringStore.cancel,\n                    function () {\n                        window.location.reload();\n                    },\n                    null\n                );\n                contentArea.html(\"\"); // Clear loading icon.\n            } else {\n                // It looks like we may not have a connection so we can't launch notifications.\n                // We can warn the user like this instead.\n                setCourseContentHTML(contentArea, \"<p>\" + stringStore.noconnectionerror + \"</p>\");\n                setTimeout(function () {\n                    expandSection(contentArea, sectionNum);\n                }, 500);\n            }\n            require([\"core/log\"], function(log) {\n                log.debug(failResult);\n            });\n            throw new Error(\"Not successful retrieving tile content by AJAX for section \" + sectionNum);\n        };\n\n        /**\n         * For a given section, get the content from the server, add it to the store and maybe UI and maybe show it\n         * @param {number} courseId the id for the affected course\n         * @param {number} sectionNum the section number we are wanting to populate\n         * @return {Promise} promise to resolve when the ajax call returns.\n         */\n        var getSectionContentFromServer = function (courseId, sectionNum) {\n            return ajax.call([{\n                methodname: \"format_tiles_get_single_section_page_html\",\n                args: {\n                    courseid: courseId,\n                    sectionid: sectionNum,\n                    setjsusedsession: true\n                }\n            }])[0];\n        };\n\n        /**\n         * Temporary function to adjust shade of RGB colour\n         * (used for shading tiles to get around transparent background on overlay issue)\n         * @param {number} R\n         * @param {number} G\n         * @param {number} B\n         * @param {number} percent\n         * @returns {string}\n         */\n        var shadeRGBColor = function (R, G, B, percent) {\n            var t = percent < 0 ? 0 : 255;\n            var p = percent < 0 ? percent * -1 : percent;\n            var r = Math.round((t - R) * p) + R;\n            var g = Math.round((t - G) * p) + G;\n            var b = Math.round((t - B) * p) + B;\n            return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n        };\n\n        /**\n         * Add an opaque modal backdrop like div to obscure all other tiles and bring specified tile and content to front\n         * @param {number} secNumOnTop the section number which should be displayed on top of the overlay\n         */\n        var setOverlay = function (secNumOnTop) {\n            windowOverlay.fadeIn(300);\n            backDropZIndex = parseInt(windowOverlay.css(CSS.Z_INDEX));\n            var tile = $(Selector.TILEID + secNumOnTop);\n            tile.css(CSS.Z_INDEX, (backDropZIndex + 1));\n            $(Selector.SECTION_ID + secNumOnTop).css(CSS.Z_INDEX, (backDropZIndex + 1));\n            if (tile.css(CSS.BG_COLOUR) && tile.css(CSS.BG_COLOUR).substr(0, 4) === \"rgba\") {\n                // Tile may have transparent background from theme - needs to be solid otherwise modal shows through.\n                var existingColour = tile.css(CSS.BG_COLOUR).replace(\"rgba(\", \"\").replace(\")\", \"\").replace(\" \", \"\").split(\",\");\n                tile.css(CSS.BG_COLOUR, shadeRGBColor(\n                    parseInt(existingColour[0]),\n                    parseInt(existingColour[1]),\n                    parseInt(existingColour[2]),\n                    0.95\n                ));\n            }\n        };\n\n        /**\n         * Used where the user clicks the window overlay but we want the active click to be behind the\n         * overlay e.g. the tile or custom menu item behind it.  So we get the co-ordinates of the click\n         * on the overlay and then repeat the click at that spot ignoring the overlay\n         * @param {object} e the click event object\n         */\n        var clickItemBehind = function (e) {\n            var clickedItem = $(e.currentTarget);\n            if (clickedItem.attr(\"id\") === \"window-overlay\") {\n                // We need to know what is behind the modal, so hide it for an instant to find out.\n                clickedItem.hide();\n                var BottomElement = $(document.elementFromPoint(e.clientX, e.clientY));\n                clickedItem.show();\n                if (clickedItem.attr(\"id\") === \"window-overlay\") {\n                    if (BottomElement.hasClass(\"filterbutton\") || BottomElement.hasClass(\"list-group-item\")) {\n                        // Must ba a filter button clicked or a nav drawer item.\n                        BottomElement.click();\n                    } else {\n                        // Must be a tile clicked.\n                        var clickedTile = BottomElement.closest(Selector.TILE);\n                        if (clickedTile) {\n                            clickedTile.click();\n                        }\n                    }\n                } else {\n                    // Must be a click on the header bar.\n                    cancelTileSelections(0);\n                    BottomElement.click();\n                }\n            }\n        };\n\n        /**\n         * If the user had section zero collapsed in this course previously, collapse it now\n         */\n        var setSectionZeroFromUserPref = function () {\n            var buttonHideSecZero = $(Selector.HIDE_SEC0_BTN);\n            var sectionZero = $(Selector.SECTION_ZERO);\n            if (browserStorage.storageEnabledLocal()) {\n                // Collapse section zero if user had it collapsed before - relies on local storage so only if enabled.\n                if (browserStorage.getSecZeroCollapseStatus() === true) {\n                    sectionZero.slideUp(0);\n                    buttonHideSecZero.addClass(ClassNames.CLOSED).removeClass(ClassNames.OPEN); // Button image.\n                } else {\n                    sectionZero.slideDown(300);\n                    buttonHideSecZero.addClass(ClassNames.OPEN).removeClass(ClassNames.CLOSED); // Button image.\n                }\n            } else {\n                // Storage not available so we dont know if sec zero was previously collapsed - expand it.\n                buttonHideSecZero.addClass(ClassNames.OPEN).removeClass(ClassNames.CLOSED);\n                sectionZero.slideDown(300);\n            }\n        };\n\n        /**\n         * To be called when a tile is clicked. Get content from server or storage and display or store it.\n         * @param {number} courseId courseId the id of this course.\n         * @param {object} thisTile jquery the tile object clicked.\n         * @param {number} dataSection the id number of the tile.\n         */\n        var populateAndExpandSection = function(courseId, thisTile, dataSection) {\n            setOverlay(dataSection);\n            $(Selector.TILE).removeClass(ClassNames.SELECTED);\n            thisTile.addClass(ClassNames.SELECTED);\n            openTile = dataSection;\n            // Then close all open secs.\n            // Timed to finish in 200 so that it completes well before the opening next.\n            $(Selector.MOVEABLE_SECTION).each(function (index, sec) {\n                sec = $(sec);\n                if (sec.is(\":visible\")) {\n                    stopVideoPlaying(sec.attr(\"data-section\"));\n                    sec.slideUp(200).removeClass(ClassNames.STATE_VISIBLE); // Excludes section 0.\n                }\n            });\n            // Log the fact we viewed the section.\n            ajax.call([{\n                methodname: \"format_tiles_log_tile_click\", args: {\n                    courseid: courseId,\n                    sectionid: dataSection\n                }\n            }])[0].fail(Notification.exception);\n            // Get the content - use locally stored content first if available.\n            var relatedContentArea = $(Selector.SECTION_ID + dataSection);\n            if (relatedContentArea.find(Selector.ACTIVITY).length > 0) {\n                // There is already some content on the screen so display immediately.\n                expandSection(relatedContentArea, dataSection);\n\n                // Still contact the server in case content has changed (e.g. restrictions now satisfied).\n                getSectionContentFromServer(courseId, dataSection).done(function (response) {\n                    setCourseContentHTML(relatedContentArea, $(response.html).html());\n                });\n            } else {\n                relatedContentArea.html(loadingIconHtml);\n                // Get from server.\n                getSectionContentFromServer(courseId, dataSection).done(function (response) {\n                    setCourseContentHTML(relatedContentArea, $(response.html).html());\n                    expandSection(relatedContentArea, dataSection);\n                }).fail(function (failResult) {\n                    failedLoadSectionNotify(dataSection, failResult, relatedContentArea);\n                    cancelTileSelections(dataSection);\n                });\n            }\n            browserStorage.setLastVisitedSection(dataSection);\n        };\n\n        return {\n            init: function (\n                courseIdInit,\n                useJavascriptNav, // Set by site admin see settings.php.\n                isMobileInit,\n                sectionNum,\n                useFilterButtons,\n                assumeDataStoreConsent, // Set by site admin see settings.php.\n                reopenLastSectionInit, // Set by site admin see settings.php.\n                userId,\n                fitTilesToWidth,\n                usingH5pFilter,\n                enableCompletionInit\n            ) {\n                courseId = courseIdInit;\n                isMobile = isMobileInit;\n                // Some args are strings or ints but we prefer bool.  Change to bool now as they are passed on elsewhere.\n                reopenLastVisitedSection = reopenLastSectionInit === \"1\";\n                useFilterButtons = useFilterButtons === 1;\n                assumeDataStoreConsent = assumeDataStoreConsent === \"1\";\n                enableCompletion = enableCompletionInit === \"1\";\n                 // We want to initialise the browser storage JS module for storing user settings.\n                browserStorage.init(\n                    courseId,\n                    false,\n                    sectionNum,\n                    assumeDataStoreConsent,\n                    userId\n                );\n                $(document).ready(function () {\n                    var pageContent = $(\"#page-content\");\n                    if (pageContent.length === 0) {\n                        // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                        pageContent = $(\"#region-main\");\n                    }\n\n                    // If we are being told to launch a section number from the URL, use that.\n                    if (sectionNum !== 0) {\n                        openTile = sectionNum;\n                    } else {\n                        // Don't use the URL param - check local storage instead.\n                        if (reopenLastVisitedSection && browserStorage.storageEnabledLocal) {\n                            openTile = browserStorage.getLastVisitedSection();\n                            // If user is not on mobile, retrieve last visited section id from browser storage (if present).\n                            // And click it.\n                        }\n                    }\n                    if (openTile !== 0) {\n                        tileFitter.init(courseId, openTile, fitTilesToWidth, false);\n                    } else {\n                        // Set focus to the first tile (not section zero).\n                        $(Selector.TILEID + \"1\").focus();\n                        tileFitter.init(courseId, null, fitTilesToWidth, false);\n                    }\n                    var windowWidth = $(window).outerWidth();\n\n                    if (useJavascriptNav) {\n                        // User is not editing but is usingJS nav to view.\n\n                        // When a tile is clicked we add an overlay to grey out the rest of the tiles on the page, so prepare it.\n                        windowOverlay = $(\"<div></div>\").addClass(\"modal-backdrop fade in\").hide()\n                            .attr(\"id\", \"window-overlay\").appendTo(body);\n\n                        // If user clicks the window overlay behind the visible tile content, deselect tile.\n                        // (They want to remove the overlay).\n                        windowOverlay.click(function (e) {\n                            cancelTileSelections(0);\n                            clickItemBehind(e);\n                        });\n\n                         // On a tile click, decide what to do an do it.\n                         // (Collapse if already expanded, or expand it and fill with content).\n                        pageContent.on(Event.CLICK, Selector.TILE_CLICKABLE, function (e) {\n                            // Prevent the link being followed to reload the PHP page as we are using JS instead.\n                            if (!useJavascriptNav) {\n                                return;\n                            }\n                            e.preventDefault();\n                            $(window).off(Event.SCROLL); // Stop listening for scroll events on ay previously opened tiles.\n                            // if other tiles have loading icons, fade them out (on the tile not the content sec).\n                            $(Selector.TILE_LOADING_ICON).fadeOut(300, function () {\n                                $(Selector.TILE_LOADING_ICON).html();\n                            });\n                            var thisTile = $(e.currentTarget).closest(Selector.TILE);\n                            var dataSection = parseInt(thisTile.attr(\"data-section\"));\n                            if (thisTile.hasClass(ClassNames.SELECTED)) {\n                                // This tile is already expanded so collapse it.\n                                cancelTileSelections(dataSection);\n                                browserStorage.setLastVisitedSection(0);\n                            } else {\n                                populateAndExpandSection(courseId, thisTile, dataSection);\n                            }\n                            // Silently set the *next* section's content to if it exists and if user is not on mobile.\n                            // short delay as more important to get current section content first (above).\n                            var nextSecIfExists = $(Selector.SECTION_ID + (dataSection + 1));\n                            if (!isMobile && !usingH5pFilter && nextSecIfExists.length && dataSection > 0) {\n                                getSectionContentFromServer(courseId, dataSection + 1).done(function(response) {\n                                    setCourseContentHTML(\n                                        nextSecIfExists,\n                                        $(response.html).html()\n                                    );\n                                });\n                            }\n                        });\n\n                        // When window is re-sized, content sections under the tiles may be in wrong place.\n                        // So remove them and re-initialise them.\n                        // Collapse the selected section before doing this.\n                        // Otherwise the re-organisation won't work as the tiles' flow will be out when they are analysed.\n                        $(window).on(\"resize\", function () {\n                            // On iOS resize events are triggered often on scroll because the address bar hides itself.\n                            // Avoid this using windowWidth here.\n                            if (resizeLocked || windowWidth === $(window).outerWidth()) {\n                                return;\n                            }\n                            resizeLocked = true;\n\n                            // We wait for a short time before doing anything, as user may still be dragging window size change.\n                            // We don't want to react to say 20 resize events happening over a single drag.\n                            setTimeout(function() {\n                                // First assume that we are going to resize, but we have checks to make below.\n                                var resizeRequired = true;\n\n                                // If we have a Moodle media player div in the section in fullscreen, ignore this resize event.\n                                // It was probably caused when user pressed the full screen button.\n                                var openContentSection = $(\".moveablesection:visible\");\n                                if (openContentSection.length !== 0) {\n                                    var mediaPlayers = openContentSection.find(\".mediaplugin iframe\");\n                                    if (mediaPlayers.length !== 0) {\n                                        mediaPlayers.each(function (index, player) {\n                                            player = $(player);\n                                            if (player.outerWidth() > openContentSection.outerWidth()) {\n                                                // Video is present and playing full screen so don't react to resize event.\n                                                resizeRequired = false;\n                                            }\n                                        });\n                                    }\n                                }\n                                if (resizeRequired) {\n                                    // Set global for comparison next time.\n                                    windowWidth = $(window).outerWidth();\n                                    reOrgSections(true, fitTilesToWidth);\n                                }\n                                resizeLocked = false;\n                            }, 600);\n                        });\n\n                        // We want the main menu at the top to be on top of the tiles.\n                        // Even the ones which we have brought to the front on top of the window overlay.\n                        // But we also want it to still be greyed out.  So add an opaque overlay.\n                        // We can show this when the main overlay is active.\n                        // When a user clicks this overlay, they want to close the overlay and click menu item behind.\n                        // So provide for that here.\n                        // Z-INDICES: active tile will be at overlayZindex + 1.\n                        // Header bar will be at overlayZindex + 2 so that it is higher than tiles.\n                        // Header bar overlay will be at overlayZindex + 3 so that it is highest of all.\n\n                        var overlayZindex = parseInt(windowOverlay.css(CSS.Z_INDEX));\n                        var headerBar = $(Selector.HEADER_BAR.find(function(selector) {\n                            return $(selector).length > 0;\n                        }));\n                        if (headerBar !== undefined && headerBar.length !== 0) {\n                            headerBar.css(CSS.Z_INDEX, overlayZindex + 3);\n                        }\n\n                        // When user clicks to close a section using cross at top right in section.\n                        pageContent.on(Event.CLICK, Selector.CLOSE_SEC_BTN, function (e) {\n                            cancelTileSelections($(e.currentTarget).attr(\"data-section\"));\n                        });\n\n                        // If user clicks a sub tile body below the link, treat it as a click on the link itself.\n                        pageContent.on(Event.CLICK, Selector.LAUNCH_STANDARD, function(e) {\n                            var clickedLk = $(e.currentTarget);\n                            if (clickedLk.attr(\"href\") !== undefined) {\n                                window.location = clickedLk.attr(\"href\");\n                            } else if (clickedLk.find('a').attr(\"href\") !== undefined) {\n                                window.location = clickedLk.find('a').attr(\"href\");\n                            }\n                        });\n\n                        setSectionZeroFromUserPref();\n                        // Most filter button related JS is in filter_buttons.js module which is required below.\n\n                    }\n\n                    // If this event is triggered, user has updated a completion check box.\n                    // We need to retrieve section content from server in case availability of items has changed.\n                    $(document).on('format-tiles-completion-changed', function(e, data) {\n                        const allSectionNums = $(Selector.TILE).not(Selector.SPACER).map((i, t) => {\n                            return parseInt($(t).attr('data-section'));\n                        }).toArray();\n                        // Need to include sec zero as may have completion tracked items.\n                        allSectionNums.push(0);\n                        const requests = ajax.call([\n                            {\n                                methodname: \"format_tiles_get_single_section_page_html\",\n                                args: {\n                                    courseid: courseId,\n                                    sectionid: data.section,\n                                    setjsusedsession: true\n                                }\n                            },\n                            {\n                                methodname: \"format_tiles_get_section_information\",\n                                args: {\n                                    courseid: courseId,\n                                    sectionnums: allSectionNums\n                                }\n                            }\n                        ]);\n                        requests[0]\n                            .done((response) => {\n                                setCourseContentHTML($(Selector.SECTION_ID + data.section), $(response.html).html());\n                            })\n                            .catch(err => {\n                                require([\"core/log\"], function(log) {\n                                    log.debug(err);\n                                });\n                            });\n                        requests[1]\n                            .done((response) => {\n                                require([\"format_tiles/completion\"], function (completion) {\n                                    completion.updateSectionsInfo(\n                                        response.sections, response.overall.complete, response.overall.outof\n                                    );\n                                });\n\n                            })\n                            .catch(err => {\n                                require([\"core/log\"], function(log) {\n                                    log.debug(err);\n                                });\n                            });\n                    });\n\n                    // When the user presses the button to collapse or expand Section zero (section at the top of the course).\n                    pageContent.on(Event.CLICK, Selector.HIDE_SEC0_BTN, function (e) {\n                        var sectionZero = $(Selector.SECTION_ZERO);\n                        if (sectionZero.css(CSS.DISPLAY) === \"none\") {\n                            // Sec zero is collapsed so expand it on user click.\n                            sectionZero.slideDown(250);\n                            $(e.currentTarget).addClass(ClassNames.OPEN).removeClass(ClassNames.CLOSED);\n                            browserStorage.setSecZeroCollapseStatus(\"collapsed\");\n                        } else {\n                            // Sec zero is expanded so collapse it on user click.\n                            sectionZero.slideUp(250);\n                            $(e.currentTarget).addClass(ClassNames.CLOSED).removeClass(ClassNames.OPEN);\n                            browserStorage.setSecZeroCollapseStatus(\"expanded\");\n                        }\n                    });\n\n                    if (useFilterButtons) {\n                        require([\"format_tiles/filter_buttons\"], function (filterButtons) {\n                            filterButtons.init(courseId, browserStorage.storageEnabledLocal);\n                        });\n                        if (useJavascriptNav) {\n                            pageContent.on(Event.CLICK, Selector.FILTER_BUTTON, function () {\n                                cancelTileSelections(0);\n                                reOrgSections(true, false);\n                            });\n                        }\n\n                    }\n                    // If theme is displaying the .tiles_coursenav class items, show items with this class.\n                    // They will be hidden otherwise.\n                    // They are hidden when initially rendered from PHP as we only want them shown if browser supports JS.\n                    // See lib.php extend_course_navigation.\n                    $(\".tiles_coursenav\").removeClass(\"hidden\");\n\n                    // Render the loading icon and store its HTML globally so that we can use it where needed later.\n                    Templates.render(\"format_tiles/loading\", {}).done(function (html) {\n                        loadingIconHtml = html;\n                    });\n\n                     // Get these strings now, in case we need them.\n                    // E.g. after we lose connection and cannot display content on a user tile click.\n                    var stringKeys = [\n                        {key: \"sectionerrortitle\", component: \"format_tiles\"},\n                        {key: \"sectionerrorstring\", component: \"format_tiles\"},\n                        {key: \"refresh\"},\n                        {key: \"cancel\"},\n                        {key: \"noconnectionerror\", component: \"format_tiles\"},\n                        {key: \"show\"},\n                        {key: \"hide\"},\n                        {key: \"other\", component: \"format_tiles\"},\n                        {key: \"blockedpopuptitle\", component: \"format_tiles\"}\n                    ];\n                    str.get_strings(stringKeys).done(function (s) {\n                        s.forEach(function(str, index) {\n                            if (str) {\n                                stringStore[stringKeys[index].key] = str;\n                            } else {\n                                stringStore[stringKeys[index].key] = 'Error.';\n                                require([\"core/log\"], function(log) {\n                                    log.debug(`Format tiles get_strings error ${index}`);\n                                    log.debug(s);\n                                });\n                            }\n                        });\n                    })\n                    .fail(function(err) {\n                        require([\"core/log\"], function(log) {\n                            log.debug(err);\n                        });\n                    });\n\n                    // If a mobile user clicks an embedded video activity, we don't show them a modal.\n                    // It won't work well. Instead we direct them to the original site e.g. YouTube.\n                    if (isMobile) {\n                        pageContent.on(Event.CLICK, Selector.ACTIVITY + \".video a\", function(e) {\n                            var target = $(e.currentTarget);\n                            var url = target.closest(Selector.ACTIVITY).attr(\"data-url-secondary\");\n                            if (url !== undefined) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                var cm = target.closest(Selector.ACTIVITY);\n                                ajax.call([{\n                                    methodname: \"format_tiles_log_mod_view\", args: {\n                                        courseid: courseId,\n                                        cmid: cm.attr(\"data-cmid\")\n                                    }\n                                }])[0].done(function () {\n                                    // Because we intercepted the normal event for the click, process auto completion.\n                                    require([\"format_tiles/completion\"], function (completion) {\n                                        completion.markAsAutoCompleteInUI(courseId, cm);\n                                    });\n                                });\n                                window.location = url;\n                            }\n                        });\n                    } else {\n                        // If user is NOT on mobile device.\n\n                        // If return is pressed while an item is in focus, click the item.\n                        // This is to make the tiles keyboard navigable for users using screen readers.\n                        // Once the tile is clicked, the expand tile function will move focus to the first content item.\n                        $(Selector.TILE).on(Event.KEYDOWN, function (e) {\n                            if (e.keyCode === Keyboard.RETURN) { // Return key pressed.\n                                $(e.currentTarget).click();\n                            }\n                        });\n                    }\n\n                    // If Adaptable theme is being used, and Glossary auto link filter is on, we need this.\n                    // Otherwise when the auto link is clicked, the resulting dialogue is under the main overlay.\n                    // Don't need this when Boost or Clean themes are used as they handle it themselves.\n                    $(document).on(\"filter-content-updated\", function (event, msg) {\n                        if (msg.length > 0) {\n                            var elem = $(msg[0]);\n                            if (elem.hasClass(\"moodle-dialogue\") && elem.css(\"z-index\") < backDropZIndex) {\n                                    elem.css(\"z-index\", backDropZIndex + 1);\n                            }\n                        }\n                    });\n                });\n            }\n        };\n    }\n);"],"names":["define","$","Templates","ajax","browserStorage","Notification","str","tileFitter","isMobile","loadingIconHtml","windowOverlay","courseId","enableCompletion","body","bodyHtml","stringStore","scrollFuncLock","sectionIsOpen","reopenLastVisitedSection","backDropZIndex","resizeLocked","openTile","Selector","PAGE","TILE","TILEID","MOVEABLE_SECTION","FILTER_BUTTON","TILE_LOADING_ICON","TILE_LOADING_ICON_ID","TILE_COLLAPSED","TILE_CLICKABLE","TILES","ACTIVITY","SPACER","SECTION_MOVEABLE","SECTION_ID","SECTION_TITLE","SECTION_MAIN","SECTION_BUTTONS","CLOSE_SEC_BTN","HIDE_SEC0_BTN","SECTION_ZERO","MOODLE_VIDEO","LAUNCH_STANDARD","TOOLTIP","HEADER_BAR","ClassNames","Event","CSS","Keyboard","stopVideoPlaying","section","contentSection","find","each","index","iframe","attr","length","html","cancelTileSelections","sectionToFocus","sec","is","slideUp","removeClass","css","fadeOut","undefined","focus","setCourseContentHTML","contentArea","content","activities","not","on","e","keyCode","setLastVisitedSection","last","shiftKey","relatedTarget","closest","setTimeout","animate","scrollTop","offset","top","tooltipItems","tooltip","err","require","log","debug","videoJS","setUp","window","MathJax","mathJaxElems","i","node","Hub","Queue","expandSection","tileId","addClass","slideDown","buttons","scrollTo","events","stop","off","first","iframes","completion","updateTileInformation","expandAndScroll","windowTop","desiredNewPositionInSection","outerHeight","fadeIn","reOrgSections","delayBefore","fitTilesToScreenWidth","dfd","Deferred","openedSection","openedSectionNum","reOrgFunc","runReOrg","done","result","resolve","fail","reject","resizeTilesDivWidth","promise","getSectionContentFromServer","sectionNum","call","methodname","args","courseid","sectionid","setjsusedsession","setOverlay","secNumOnTop","parseInt","R","G","B","percent","t","p","tile","substr","existingColour","replace","split","Math","round","populateAndExpandSection","thisTile","dataSection","exception","relatedContentArea","response","failResult","confirm","sectionerrortitle","sectionerrorstring","refresh","cancel","location","reload","noconnectionerror","Error","failedLoadSectionNotify","init","courseIdInit","useJavascriptNav","isMobileInit","useFilterButtons","assumeDataStoreConsent","reopenLastSectionInit","userId","fitTilesToWidth","usingH5pFilter","enableCompletionInit","document","ready","pageContent","storageEnabledLocal","getLastVisitedSection","buttonHideSecZero","sectionZero","windowWidth","outerWidth","hide","appendTo","click","clickedItem","currentTarget","BottomElement","elementFromPoint","clientX","clientY","show","hasClass","clickedTile","clickItemBehind","preventDefault","nextSecIfExists","resizeRequired","openContentSection","mediaPlayers","player","overlayZindex","headerBar","selector","clickedLk","getSecZeroCollapseStatus","data","allSectionNums","map","toArray","push","requests","sectionnums","catch","updateSectionsInfo","sections","overall","complete","outof","setSecZeroCollapseStatus","filterButtons","render","stringKeys","key","component","get_strings","s","forEach","target","url","stopPropagation","cm","cmid","markAsAutoCompleteInUI","event","msg","elem"],"mappings":"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"}